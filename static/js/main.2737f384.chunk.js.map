{"version":3,"sources":["styles.js","components/GithubCard/index.js","views/home.js","views/tech.js","App.js","serviceWorker.js","index.js"],"names":["Global","createGlobalStyle","NavWrapper","styled","div","Nav","NavLink","a","Page","color","Container","nav","Title","h1","Description","p","Github","fullWidth","css","label","select","makeStyles","card","maxWidth","media","height","Home","href","target","rel","Tech","pages","path","title","component","App","useState","preset","enterAnimation","exitAnimation","basename","exact","render","to","location","map","page","index","as","Link","key","transitionKey","pathname","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s2GAEO,IAAMA,EAASC,4BAAH,KA2BNC,EAAaC,UAAOC,IAAV,KAYVC,EAAMF,UAAOC,IAAV,KAKHE,EAAUH,UAAOI,EAAV,KAaPC,EAAOL,UAAOC,IAAV,KACK,qBAAGK,SAUZC,EAAYP,UAAOQ,IAAV,KAMTC,EAAQT,UAAOU,GAAV,KAcLC,EAAcX,UAAOY,EAAV,KAQXC,EAASb,UAAOY,EAAV,K,GAMKZ,UAAOQ,IAAV,KAMAR,UAAOC,IAAV,KAOd,qBAAGa,WAEHC,cADS,QAQQf,UAAOgB,MAAV,KAMIhB,UAAOiB,OAAV,K,gFCtHDC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OC0DGC,MAzEf,YAA0B,IAAVjB,EAAS,EAATA,MACd,OACE,kBAAC,EAAD,CAAaA,MAAOA,GAClB,kBAAC,EAAD,KACE,kBAAC,EAAD,sBACgB,uDAEhB,kBAAC,EAAD,4BACuB,IACrB,uBACEkB,KAAK,4CACLC,OAAO,SACPC,IAAI,YAHN,kBAQF,kBAAC,EAAD,2BACsB,IACpB,uBACEF,KAAK,mCACLC,OAAO,SACPC,IAAI,YAHN,2BCwDKC,MA5Ef,YAAuB,IAARrB,EAAO,EAAPA,MACX,OACI,kBAAC,EAAD,CAAaA,MAAOA,GACpB,kBAAC,EAAD,KACA,kBAAC,EAAD,WACO,oDAGP,kBAAC,EAAD,wBCEFsB,EAAQ,CACZ,CACEC,KAAM,IACNC,MAAO,SACPxB,MAAO,UACPyB,UAAW,SAAAzB,GAAK,OAAI,kBAAC,EAAD,CAAMA,MAAOA,MAEnC,CACEuB,KAAM,QACNC,MAAO,eACPxB,MAAO,UACPyB,UAAW,SAAAzB,GAAK,OAAI,kBAAC,EAAD,CAAMA,MAAOA,OA4EtB0B,MApDf,WAAgB,IAAD,EACIC,mBAAS,uBAAnBC,EADM,sBAEYD,mBAAS,IAA3BE,EAFM,sBAGWF,mBAAS,IAA1BG,EAHM,oBAQb,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,CAAOC,OAAK,EAACT,KAAK,IAAIU,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,SACjD,kBAAC,IAAD,CACED,OAAQ,gBAAGE,EAAH,EAAGA,SAAH,OACN,oCACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGb,EAAMc,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,EAAD,CAAgBC,GAAIC,IAAMC,IAAKH,EAAOJ,GAAIG,EAAKd,MAC5Cc,EAAKb,YAMd,kBAAC,IAAD,CACEI,OAAQA,EACRc,cAAeP,EAASQ,SACxBd,eAAgBA,EAChBC,cAAeA,GAEf,kBAAC,IAAD,CAAQK,SAAUA,GACfb,EAAMc,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CACEG,IAAKH,EACLN,OAAK,EACLT,KAAMc,EAAKd,KACXE,UAAW,kBAAMY,EAAKZ,UAAUY,EAAKrC,aAI3C,kBAAC,IAAD,CAAOgC,OAAK,EAACT,KAAK,IAAIE,UAAW,kBAAM,kBAAC,IAAD,CAAUS,GAAG,iBC/EhDU,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASf,OAAO,kBAAC,EAAD,MAASgB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2737f384.chunk.js","sourcesContent":["import styled, { css, createGlobalStyle } from 'styled-components';\n\nexport const Global = createGlobalStyle`\n    * {\n        border: 0;\n        box-sizing: border-box;\n        color: inherit;\n        font-size: inherit;\n        margin: 0;\n        padding: 0;\n    }\n\n    html, body, #root {\n        height: 100%;\n    }\n\n    body{\n        background-color: #333;\n        color: rgba(255,255,255,0.9);\n        font-family: \"Quicksand\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n        font-size: 16px;\n    }\n\n    a {\n        font-weight: 500;\n        text-decoration: none;\n    }\n`;\n\nexport const NavWrapper = styled.div`\n  display: flex;\n  left: 0;\n  overflow-x: auto;\n  overflow-y: hidden;\n  padding: 32px;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  z-index: 3;\n`;\n\nexport const Nav = styled.div`\n  flex: none;\n  margin: 0 auto;\n`;\n\nexport const NavLink = styled.a`\n  border-radius: 40px;\n  flex: none;\n  font-weight: 500;\n  padding: 12px 24px;\n  text-decoration: none;\n  transition: background-color 200ms ease;\n\n  &:hover {\n    background-color: rgba(47, 66, 80, 0.1);\n  }\n`;\n\nexport const Page = styled.div`\n  background-color: ${({ color }) => color};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  padding: 100px 24px 24px 24px;\n  width: 100%;\n`;\n\nexport const Container = styled.nav`\n  margin: auto;\n  max-width: 70ch;\n  width: 100%;\n`;\n\nexport const Title = styled.h1`\n  color: #dfe6e9;\n  font-size: 3rem;\n  font-weight: 500;\n  margin-bottom: 24px;\n  text-align: center;\n  text-transform: uppercase;\n\n  strong {\n    color: rgba(255, 255, 255, 0.9);\n    font-weight: 400;\n  }\n`;\n\nexport const Description = styled.p`\n  font-size: 1.4rem;\n  font-weight: 400;\n  line-height: 1.4;\n  margin-bottom: 48px;\n  text-align: center;\n`;\n\nexport const Github = styled.p`\n  line-height: 1.4;\n  margin-bottom: 48px;\n  text-align: center;\n`;\n\nexport const Settings = styled.nav`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n`;\n\nexport const Field = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 0 auto;\n  min-width: 50%;\n  padding: 8px;\n\n  ${({ fullWidth }) =>\n    fullWidth &&\n    css`\n      flex: none;\n      width: 100%;\n      margin-bottom: 32px;\n    `};\n`;\n\nexport const Label = styled.label`\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 16px;\n  margin-bottom: 8px;\n`;\n\nexport const Select = styled.select`\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  color: rgba(0, 0, 0, 0.5);\n  font-size: 16px;\n  height: 44px;\n  min-width: 240px;\n  padding: 0 16px;\n  width: 100%;\n  -webkit-appearance: none;\n`;","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n});\n\nconst API = \"https://api.github.com/users\";\n\nconst useFetchProfile = username => {\n  const [result, setResult] = useState([]);\n  const [loading, setLoading] = useState(true);\n  let url = `${API}/${username}`;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(\"true\");\n        const response = await fetch(url);\n\n        const json = await response.json();\n        console.log(json);\n        setResult(json);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return [result, loading];\n};\n\nconst GithubCard = ({ username }) => {\n  const [result, loading] = useFetchProfile(username);\n  const classes = useStyles();\n\n  let content = null;\n\n  if (loading) {\n    content = <CircularProgress />;\n  }\n\n  if (result != null) {\n    content = (\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={result.avatar_url}\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {result.login}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              <ul style={{ marginLeft: 50 }}>\n                <li>test</li>\n              </ul>\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\">\n            Seguime en Github\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n\n  return content;\n};\n\nexport default GithubCard;\n","import React from \"react\";\nimport GithubCard from \"../components/GithubCard\";\nimport * as Styles from \"../styles\";\n\nfunction Home({ color }) {\n  return (\n    <Styles.Page color={color}>\n      <Styles.Container>\n        <Styles.Title>\n          Luis Fernando <strong>Betancourt Utrera </strong>\n        </Styles.Title>\n        <Styles.Description>\n          Full-Stack Developer{\" \"}\n          <a\n            href=\"https://www.linkedin.com/in/unfernandito/\"\n            target=\"_blank\"\n            rel=\"nofollow\"\n          >\n            CTO de WeHaus\n          </a>\n        </Styles.Description>\n        <Styles.Github>\n          Visita mi perfil de{\" \"}\n          <a\n            href=\"https://github.com/unfernandito/\"\n            target=\"_blank\"\n            rel=\"nofollow\"\n          >\n            Github üêà\n          </a>\n        </Styles.Github>\n\n        {/* <Styles.Settings>\n            <Styles.Field fullWidth>\n            <Styles.Label>Preset: </Styles.Label>\n            <Styles.Select value={preset} onChange={handlePresetChange}>\n                {Object.keys(presets).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n\n            <Styles.Field>\n            <Styles.Label>Enter Override: </Styles.Label>\n            <Styles.Select\n                value={enterAnimation}\n                onChange={handleEnterAnimationChange}>\n                <option value=\"\">None</option>\n                {Object.keys(animations).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n\n            <Styles.Field>\n            <Styles.Label>Exit Override: </Styles.Label>\n            <Styles.Select\n                value={exitAnimation}\n                onChange={handleExitAnimationChange}>\n                <option value=\"\">None</option>\n                {Object.keys(animations).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n        </Styles.Settings> */}\n      </Styles.Container>\n    </Styles.Page>\n  );\n}\n\nexport default Home;\n","import React from 'react'\nimport * as Styles from '../styles'\n\nfunction Tech({color}){\n    return (\n        <Styles.Page color={color}>\n        <Styles.Container>\n        <Styles.Title>\n            En <strong>Construcci√≥n</strong>\n        </Styles.Title>\n\n        <Styles.Description>\n            {/* A React component that makes it easy to use the page transitions from\n            the{' '}\n            <a\n            href=\"https://tympanus.net/Development/PageTransitions/\"\n            target=\"_blank\"\n            rel=\"nofollow\">\n            Codedrops Page Transitions Demo\n            </a> */}\n\n            Proximamente\n        </Styles.Description>\n\n        {/* <Styles.Github>\n            View the usage instructions and source code on{' '}\n            <a\n            href=\"https://github.com/Steveeeie/react-page-transition\"\n            target=\"_blank\"\n            rel=\"nofollow\">\n            Github\n            </a>\n        </Styles.Github> */}\n\n        {/* <Styles.Settings>\n            <Styles.Field fullWidth>\n            <Styles.Label>Preset: </Styles.Label>\n            <Styles.Select value={preset} onChange={handlePresetChange}>\n                {Object.keys(presets).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n\n            <Styles.Field>\n            <Styles.Label>Enter Override: </Styles.Label>\n            <Styles.Select\n                value={enterAnimation}\n                onChange={handleEnterAnimationChange}>\n                <option value=\"\">None</option>\n                {Object.keys(animations).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n\n            <Styles.Field>\n            <Styles.Label>Exit Override: </Styles.Label>\n            <Styles.Select\n                value={exitAnimation}\n                onChange={handleExitAnimationChange}>\n                <option value=\"\">None</option>\n                {Object.keys(animations).map(key => (\n                <option key={key} value={key}>\n                    {key}\n                </option>\n                ))}\n            </Styles.Select>\n            </Styles.Field>\n        </Styles.Settings> */}\n        </Styles.Container>\n    </Styles.Page>\n    )\n}\n\nexport default Tech","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport * as Styles from \"./styles\";\nimport PageTransition from \"@steveeeie/react-page-transition\";\nimport Home from \"./views/home\";\nimport Tech from \"./views/tech\";\n\nconst pages = [\n  {\n    path: \"/\",\n    title: \"Inicio\",\n    color: \"#0984e3\",\n    component: color => <Home color={color} />\n  },\n  {\n    path: \"/tech\",\n    title: \"Tecnnologias\",\n    color: \"#a29bfe\",\n    component: color => <Tech color={color} />\n  }\n  // {\n  //   path: '/page-3',\n  //   title: 'Page 3',\n  //   color: '#FDC162'\n  // },\n  // {\n  //   path: '/page-4',\n  //   title: 'Page 4',\n  //   color: '#47B881'\n  // },\n  // {\n  //   path: '/page-5',\n  //   title: 'Page 5',\n  //   color: '#425A70'\n  // },\n  // {\n  //   path: '/page-6',\n  //   title: 'Page 6',\n  //   color: '#735DD0'\n  // }\n];\n\nfunction App() {\n  const [preset] = useState(\"moveToBottomScaleUp\");\n  const [enterAnimation] = useState(\"\");\n  const [exitAnimation] = useState(\"\");\n  // const handlePresetChange = event => setPreset(event.target.value);\n  // const handleEnterAnimationChange = event => setEnterAnimation(event.target.value);\n  // const handleExitAnimationChange = event => setExitAnimation(event.target.value);\n\n  return (\n    <Router basename=\"/\">\n      <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\n      <Route\n        render={({ location }) => (\n          <>\n            <Styles.Global />\n\n            <Styles.NavWrapper>\n              <Styles.Nav>\n                {pages.map((page, index) => (\n                  <Styles.NavLink as={Link} key={index} to={page.path}>\n                    {page.title}\n                  </Styles.NavLink>\n                ))}\n              </Styles.Nav>\n            </Styles.NavWrapper>\n\n            <PageTransition\n              preset={preset}\n              transitionKey={location.pathname}\n              enterAnimation={enterAnimation}\n              exitAnimation={exitAnimation}\n            >\n              <Switch location={location}>\n                {pages.map((page, index) => {\n                  return (\n                    <Route\n                      key={index}\n                      exact\n                      path={page.path}\n                      component={() => page.component(page.color)}\n                    />\n                  );\n                })}\n                <Route exact path=\"/\" component={() => <Redirect to=\"/\" />} />\n              </Switch>\n            </PageTransition>\n          </>\n        )}\n      />\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}